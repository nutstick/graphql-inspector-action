{"version":3,"file":"document.js","sourceRoot":"","sources":["../../src/ast/document.ts"],"names":[],"mappings":";;AAAA,mCAOiB;AAgBjB,SAAgB,YAAY,CAAC,MAAc;IACzC,IAAM,MAAM,GAAa;QACvB,MAAM,QAAA;QACN,SAAS,EAAE,EAAE;QACb,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,KAAK;QACnB,aAAa,EAAE,KAAK;KACrB,CAAC;IAEF,IAAM,YAAY,GAAG,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACxC,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC;IAC7B,IAAM,WAAW,GAAG,YAAY,CAAC,WAAW,IAAI,EAAE,CAAC;IAEnD,WAAW,CAAC,OAAO,CAAC,UAAC,IAAoB;QACvC,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;YACrB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;gBACrB,IAAI,MAAA;gBACJ,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;SACJ;aAAM,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;YAC3B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;gBACpB,IAAI,MAAA;gBACJ,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAClD,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IAEpD,OAAO,MAAM,CAAC;AAChB,CAAC;AA/BD,oCA+BC;AAED,SAAS,WAAW,CAAC,IAAoB;IACvC,OAAO,IAAI,CAAC,IAAI,KAAK,cAAI,CAAC,oBAAoB,CAAC;AACjD,CAAC;AAED,SAAS,UAAU,CAAC,IAAoB;IACtC,OAAO,IAAI,CAAC,IAAI,KAAK,cAAI,CAAC,mBAAmB,CAAC;AAChD,CAAC","sourcesContent":["import {\n  DefinitionNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  Kind,\n  Source,\n  parse,\n} from 'graphql';\n\nexport interface Document {\n  source: Source;\n  fragments: {\n    node: FragmentDefinitionNode;\n    source: string;\n  }[];\n  operations: {\n    node: OperationDefinitionNode;\n    source: string;\n  }[];\n  hasFragments: boolean;\n  hasOperations: boolean;\n}\n\nexport function readDocument(source: Source): Document {\n  const result: Document = {\n    source,\n    fragments: [],\n    operations: [],\n    hasFragments: false,\n    hasOperations: false,\n  };\n\n  const documentNode = parse(source.body);\n  const filepath = source.name;\n  const definitions = documentNode.definitions || [];\n\n  definitions.forEach((node: DefinitionNode) => {\n    if (isOperation(node)) {\n      result.operations.push({\n        node,\n        source: filepath,\n      });\n    } else if (isFragment(node)) {\n      result.fragments.push({\n        node,\n        source: filepath,\n      });\n    }\n  });\n\n  result.hasFragments = result.fragments.length > 0;\n  result.hasOperations = result.operations.length > 0;\n\n  return result;\n}\n\nfunction isOperation(node: DefinitionNode): node is OperationDefinitionNode {\n  return node.kind === Kind.OPERATION_DEFINITION;\n}\n\nfunction isFragment(node: DefinitionNode): node is FragmentDefinitionNode {\n  return node.kind === Kind.FRAGMENT_DEFINITION;\n}\n"]}