{"version":3,"file":"field.js","sourceRoot":"","sources":["../../src/diff/field.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLField,\n  GraphQLObjectType,\n  GraphQLArgument,\n  GraphQLInterfaceType,\n} from 'graphql';\n\nimport {isNotEqual, isVoid} from './common/compare';\nimport {Change} from './changes/change';\nimport {\n  fieldDescriptionChanged,\n  fieldDescriptionAdded,\n  fieldDescriptionRemoved,\n  fieldDeprecationAdded,\n  fieldDeprecationRemoved,\n  fieldDeprecationReasonChanged,\n  fieldDeprecationReasonAdded,\n  fieldDeprecationReasonRemoved,\n  fieldTypeChanged,\n  fieldArgumentAdded,\n  fieldArgumentRemoved,\n} from './changes/field';\nimport {changesInArgument} from './argument';\nimport {unionArrays, diffArrays} from '../utils/arrays';\n\nexport function changesInField(\n  type: GraphQLObjectType | GraphQLInterfaceType,\n  oldField: GraphQLField<any, any>,\n  newField: GraphQLField<any, any>,\n): Change[] {\n  const changes: Change[] = [];\n\n  if (isNotEqual(oldField.description, newField.description)) {\n    if (isVoid(oldField.description)) {\n      changes.push(fieldDescriptionAdded(type, newField));\n    } else if (isVoid(newField.description)) {\n      changes.push(fieldDescriptionRemoved(type, oldField));\n    } else {\n      changes.push(fieldDescriptionChanged(type, oldField, newField));\n    }\n  }\n\n  if (isNotEqual(oldField.isDeprecated, newField.isDeprecated)) {\n    if (newField.isDeprecated) {\n      changes.push(fieldDeprecationAdded(type, newField));\n    } else {\n      changes.push(fieldDeprecationRemoved(type, oldField));\n    }\n  }\n\n  if (isNotEqual(oldField.deprecationReason, newField.deprecationReason)) {\n    if (isVoid(oldField.deprecationReason)) {\n      changes.push(fieldDeprecationReasonAdded(type, newField));\n    } else if (isVoid(newField.deprecationReason)) {\n      changes.push(fieldDeprecationReasonRemoved(type, oldField));\n    } else {\n      changes.push(fieldDeprecationReasonChanged(type, oldField, newField));\n    }\n  }\n\n  if (isNotEqual(oldField.type.toString(), newField.type.toString())) {\n    changes.push(fieldTypeChanged(type, oldField, newField));\n  }\n\n  const oldArgs = oldField.args;\n  const newArgs = newField.args;\n  const oldNames = oldArgs.map(a => a.name);\n  const newNames = newArgs.map(a => a.name);\n\n  const added = diffArrays(newNames, oldNames).map(\n    name => newArgs.find(a => a.name === name) as GraphQLArgument,\n  );\n  const removed = diffArrays(oldNames, newNames).map(\n    name => oldArgs.find(a => a.name === name) as GraphQLArgument,\n  );\n  const common = unionArrays(oldNames, newNames).map(name => ({\n    inOld: oldArgs.find(a => a.name === name) as GraphQLArgument,\n    inNew: newArgs.find(a => a.name === name) as GraphQLArgument,\n  }));\n\n  common.forEach(({inOld, inNew}) => {\n    changes.push(...changesInArgument(type, oldField, inOld, inNew));\n  });\n\n  changes.push(...added.map(arg => fieldArgumentAdded(type, newField, arg)));\n  changes.push(\n    ...removed.map(arg => fieldArgumentRemoved(type, oldField, arg)),\n  );\n\n  return changes;\n}\n"]}