"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var compare_1 = require("./common/compare");
var arrays_1 = require("../utils/arrays");
var input_1 = require("./changes/input");
function changesInInputObject(oldInput, newInput) {
    var changes = [];
    var oldFields = oldInput.getFields();
    var newFields = newInput.getFields();
    var oldNames = Object.keys(oldFields).map(function (name) { return oldFields[name].name; });
    var newNames = Object.keys(newFields).map(function (name) { return newFields[name].name; });
    var added = arrays_1.diffArrays(newNames, oldNames).map(function (name) { return newFields[name]; });
    var removed = arrays_1.diffArrays(oldNames, newNames).map(function (name) { return oldFields[name]; });
    var common = arrays_1.unionArrays(oldNames, newNames).map(function (name) { return ({
        inOld: oldFields[name],
        inNew: newFields[name],
    }); });
    common.forEach(function (_a) {
        var inOld = _a.inOld, inNew = _a.inNew;
        changes.push.apply(changes, changesInInputField(oldInput, inOld, inNew));
    });
    changes.push.apply(changes, added.map(function (field) { return input_1.inputFieldAdded(newInput, field); }));
    changes.push.apply(changes, removed.map(function (field) { return input_1.inputFieldRemoved(oldInput, field); }));
    return changes;
}
exports.changesInInputObject = changesInInputObject;
function changesInInputField(input, oldField, newField) {
    var changes = [];
    if (compare_1.isNotEqual(oldField.description, newField.description)) {
        if (compare_1.isVoid(oldField.description)) {
            changes.push(input_1.inputFieldDescriptionAdded(input, newField));
        }
        else if (compare_1.isVoid(newField.description)) {
            changes.push(input_1.inputFieldDescriptionRemoved(input, oldField));
        }
        else {
            changes.push(input_1.inputFieldDescriptionChanged(input, oldField, newField));
        }
    }
    if (compare_1.isNotEqual(oldField.defaultValue, newField.defaultValue)) {
        if (Array.isArray(oldField.defaultValue) &&
            Array.isArray(newField.defaultValue)) {
            if (arrays_1.diffArrays(oldField.defaultValue, newField.defaultValue).length > 0) {
                changes.push(input_1.inputFieldDefaultValueChanged(input, oldField, newField));
            }
        }
        else if (JSON.stringify(oldField.defaultValue) !==
            JSON.stringify(newField.defaultValue)) {
            changes.push(input_1.inputFieldDefaultValueChanged(input, oldField, newField));
        }
    }
    if (compare_1.isNotEqual(oldField.type.toString(), newField.type.toString())) {
        changes.push(input_1.inputFieldTypeChanged(input, oldField, newField));
    }
    // TODO: diff directives
    return changes;
}
//# sourceMappingURL=input.js.map