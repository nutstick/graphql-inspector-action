{"version":3,"file":"argument.js","sourceRoot":"","sources":["../../src/diff/argument.ts"],"names":[],"mappings":";;AAOA,4CAA4C;AAE5C,+CAI4B;AAC5B,0CAA2C;AAE3C,SAAgB,iBAAiB,CAC/B,IAA8C,EAC9C,KAAkC,EAClC,MAAuB,EACvB,MAAuB;IAEvB,IAAM,OAAO,GAAa,EAAE,CAAC;IAE7B,IAAI,oBAAU,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,EAAE;QACtD,OAAO,CAAC,IAAI,CAAC,0CAA+B,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;KAC5E;IAED,IAAI,oBAAU,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,YAAY,CAAC,EAAE;QACxD,IACE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC;YAClC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,EAClC;YACA,IAAM,IAAI,GAAG,mBAAU,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;YAClE,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,OAAO,CAAC,IAAI,CAAC,sCAA2B,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;aACxE;SACF;aAAM,IACL,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC;YACnC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,EACnC;YACA,OAAO,CAAC,IAAI,CAAC,sCAA2B,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;SACxE;KACF;IAED,IAAI,oBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE;QAC9D,OAAO,CAAC,IAAI,CAAC,mCAAwB,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;KACrE;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAlCD,8CAkCC","sourcesContent":["import {\n  GraphQLArgument,\n  GraphQLObjectType,\n  GraphQLField,\n  GraphQLInterfaceType,\n} from 'graphql';\n\nimport {isNotEqual} from './common/compare';\nimport {Change} from './changes/change';\nimport {\n  fieldArgumentDescriptionChanged,\n  fieldArgumentDefaultChanged,\n  fieldArgumentTypeChanged,\n} from './changes/argument';\nimport {diffArrays} from '../utils/arrays';\n\nexport function changesInArgument(\n  type: GraphQLObjectType | GraphQLInterfaceType,\n  field: GraphQLField<any, any, any>,\n  oldArg: GraphQLArgument,\n  newArg: GraphQLArgument,\n): Change[] {\n  const changes: Change[] = [];\n\n  if (isNotEqual(oldArg.description, newArg.description)) {\n    changes.push(fieldArgumentDescriptionChanged(type, field, oldArg, newArg));\n  }\n\n  if (isNotEqual(oldArg.defaultValue, newArg.defaultValue)) {\n    if (\n      Array.isArray(oldArg.defaultValue) &&\n      Array.isArray(newArg.defaultValue)\n    ) {\n      const diff = diffArrays(oldArg.defaultValue, newArg.defaultValue);\n      if (diff.length > 0) {\n        changes.push(fieldArgumentDefaultChanged(type, field, oldArg, newArg));\n      }\n    } else if (\n      JSON.stringify(oldArg.defaultValue) !==\n      JSON.stringify(newArg.defaultValue)\n    ) {\n      changes.push(fieldArgumentDefaultChanged(type, field, oldArg, newArg));\n    }\n  }\n\n  if (isNotEqual(oldArg.type.toString(), newArg.type.toString())) {\n    changes.push(fieldArgumentTypeChanged(type, field, oldArg, newArg));\n  }\n\n  return changes;\n}\n"]}