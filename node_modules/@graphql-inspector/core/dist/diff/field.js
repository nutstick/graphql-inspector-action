"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var compare_1 = require("./common/compare");
var field_1 = require("./changes/field");
var argument_1 = require("./argument");
var arrays_1 = require("../utils/arrays");
function changesInField(type, oldField, newField) {
    var changes = [];
    if (compare_1.isNotEqual(oldField.description, newField.description)) {
        if (compare_1.isVoid(oldField.description)) {
            changes.push(field_1.fieldDescriptionAdded(type, newField));
        }
        else if (compare_1.isVoid(newField.description)) {
            changes.push(field_1.fieldDescriptionRemoved(type, oldField));
        }
        else {
            changes.push(field_1.fieldDescriptionChanged(type, oldField, newField));
        }
    }
    if (compare_1.isNotEqual(oldField.isDeprecated, newField.isDeprecated)) {
        if (newField.isDeprecated) {
            changes.push(field_1.fieldDeprecationAdded(type, newField));
        }
        else {
            changes.push(field_1.fieldDeprecationRemoved(type, oldField));
        }
    }
    if (compare_1.isNotEqual(oldField.deprecationReason, newField.deprecationReason)) {
        if (compare_1.isVoid(oldField.deprecationReason)) {
            changes.push(field_1.fieldDeprecationReasonAdded(type, newField));
        }
        else if (compare_1.isVoid(newField.deprecationReason)) {
            changes.push(field_1.fieldDeprecationReasonRemoved(type, oldField));
        }
        else {
            changes.push(field_1.fieldDeprecationReasonChanged(type, oldField, newField));
        }
    }
    if (compare_1.isNotEqual(oldField.type.toString(), newField.type.toString())) {
        changes.push(field_1.fieldTypeChanged(type, oldField, newField));
    }
    var oldArgs = oldField.args;
    var newArgs = newField.args;
    var oldNames = oldArgs.map(function (a) { return a.name; });
    var newNames = newArgs.map(function (a) { return a.name; });
    var added = arrays_1.diffArrays(newNames, oldNames).map(function (name) { return newArgs.find(function (a) { return a.name === name; }); });
    var removed = arrays_1.diffArrays(oldNames, newNames).map(function (name) { return oldArgs.find(function (a) { return a.name === name; }); });
    var common = arrays_1.unionArrays(oldNames, newNames).map(function (name) { return ({
        inOld: oldArgs.find(function (a) { return a.name === name; }),
        inNew: newArgs.find(function (a) { return a.name === name; }),
    }); });
    common.forEach(function (_a) {
        var inOld = _a.inOld, inNew = _a.inNew;
        changes.push.apply(changes, argument_1.changesInArgument(type, oldField, inOld, inNew));
    });
    changes.push.apply(changes, added.map(function (arg) { return field_1.fieldArgumentAdded(type, newField, arg); }));
    changes.push.apply(changes, removed.map(function (arg) { return field_1.fieldArgumentRemoved(type, oldField, arg); }));
    return changes;
}
exports.changesInField = changesInField;
//# sourceMappingURL=field.js.map