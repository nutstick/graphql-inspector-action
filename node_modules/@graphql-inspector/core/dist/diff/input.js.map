{"version":3,"file":"input.js","sourceRoot":"","sources":["../../src/diff/input.ts"],"names":[],"mappings":"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","sourcesContent":["import {GraphQLInputObjectType, GraphQLInputField} from 'graphql';\n\nimport {isNotEqual, isVoid} from './common/compare';\nimport {Change} from './changes/change';\nimport {diffArrays, unionArrays} from '../utils/arrays';\nimport {\n  inputFieldAdded,\n  inputFieldRemoved,\n  inputFieldDescriptionChanged,\n  inputFieldDescriptionAdded,\n  inputFieldDescriptionRemoved,\n  inputFieldDefaultValueChanged,\n  inputFieldTypeChanged,\n} from './changes/input';\n\nexport function changesInInputObject(\n  oldInput: GraphQLInputObjectType,\n  newInput: GraphQLInputObjectType,\n): Change[] {\n  const changes: Change[] = [];\n  const oldFields = oldInput.getFields();\n  const newFields = newInput.getFields();\n  const oldNames = Object.keys(oldFields).map(name => oldFields[name].name);\n  const newNames = Object.keys(newFields).map(name => newFields[name].name);\n\n  const added = diffArrays(newNames, oldNames).map(name => newFields[name]);\n  const removed = diffArrays(oldNames, newNames).map(name => oldFields[name]);\n  const common = unionArrays(oldNames, newNames).map(name => ({\n    inOld: oldFields[name],\n    inNew: newFields[name],\n  }));\n\n  common.forEach(({inOld, inNew}) => {\n    changes.push(...changesInInputField(oldInput, inOld, inNew));\n  });\n\n  changes.push(...added.map(field => inputFieldAdded(newInput, field)));\n  changes.push(...removed.map(field => inputFieldRemoved(oldInput, field)));\n\n  return changes;\n}\n\nfunction changesInInputField(\n  input: GraphQLInputObjectType,\n  oldField: GraphQLInputField,\n  newField: GraphQLInputField,\n): Change[] {\n  const changes: Change[] = [];\n\n  if (isNotEqual(oldField.description, newField.description)) {\n    if (isVoid(oldField.description)) {\n      changes.push(inputFieldDescriptionAdded(input, newField));\n    } else if (isVoid(newField.description)) {\n      changes.push(inputFieldDescriptionRemoved(input, oldField));\n    } else {\n      changes.push(inputFieldDescriptionChanged(input, oldField, newField));\n    }\n  }\n\n  if (isNotEqual(oldField.defaultValue, newField.defaultValue)) {\n    if (\n      Array.isArray(oldField.defaultValue) &&\n      Array.isArray(newField.defaultValue)\n    ) {\n      if (diffArrays(oldField.defaultValue, newField.defaultValue).length > 0) {\n        changes.push(inputFieldDefaultValueChanged(input, oldField, newField));\n      }\n    } else if (\n      JSON.stringify(oldField.defaultValue) !==\n      JSON.stringify(newField.defaultValue)\n    ) {\n      changes.push(inputFieldDefaultValueChanged(input, oldField, newField));\n    }\n  }\n\n  if (isNotEqual(oldField.type.toString(), newField.type.toString())) {\n    changes.push(inputFieldTypeChanged(input, oldField, newField));\n  }\n\n  // TODO: diff directives\n\n  return changes;\n}\n"]}