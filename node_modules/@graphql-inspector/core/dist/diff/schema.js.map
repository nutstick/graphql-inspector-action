{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/diff/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLNamedType,\n  GraphQLDirective,\n  GraphQLObjectType,\n  isEnumType,\n  isUnionType,\n  isInputObjectType,\n  isObjectType,\n  isInterfaceType,\n  isScalarType,\n} from 'graphql';\n\nimport {isNotEqual} from './common/compare';\nimport {unionArrays, diffArrays} from '../utils/arrays';\nimport {isPrimitive} from '../utils/graphql';\nimport {Change} from './changes/change';\nimport {\n  schemaQueryTypeChanged,\n  schemaMutationTypeChanged,\n  schemaSubscriptionTypeChanged,\n} from './changes/schema';\nimport {\n  typeRemoved,\n  typeAdded,\n  typeKindChanged,\n  typeDescriptionChanged,\n} from './changes/type';\nimport {directiveRemoved, directiveAdded} from './changes/directive';\nimport {changesInEnum} from './enum';\nimport {changesInUnion} from './union';\nimport {changesInInputObject} from './input';\nimport {changesInObject} from './object';\nimport {changesInInterface} from './interface';\nimport {changesInDirective} from './directive';\n\nexport function diffSchema(\n  oldSchema: GraphQLSchema,\n  newSchema: GraphQLSchema,\n): Change[] {\n  const changes: Change[] = [];\n  const types = diffTypes(oldSchema, newSchema);\n  const directives = diffDirectives(oldSchema, newSchema);\n\n  // Added and removed types\n  changes.push(...types.added.map(typeAdded));\n  changes.push(...types.removed.map(typeRemoved));\n  // Added and removed directives\n  changes.push(...directives.added.map(directiveAdded));\n  changes.push(...directives.removed.map(directiveRemoved));\n\n  // Changes in Schema\n  changes.push(...changesInSchema(oldSchema, newSchema));\n  // Changes in Type\n  types.common.forEach(({inOld, inNew}) => {\n    changes.push(...changesInType(inOld, inNew));\n  });\n  // Changes in Directives\n  directives.common.forEach(({inOld, inNew}) => {\n    changes.push(...changesInDirective(inOld, inNew));\n  });\n\n  return changes;\n}\n\nfunction diffTypes(\n  oldSchema: GraphQLSchema,\n  newSchema: GraphQLSchema,\n): {\n  added: GraphQLNamedType[];\n  removed: GraphQLNamedType[];\n  common: {\n    inOld: GraphQLNamedType;\n    inNew: GraphQLNamedType;\n  }[];\n} {\n  const oldTypeMap = oldSchema.getTypeMap();\n  const newTypeMap = newSchema.getTypeMap();\n  const oldTypenames = Object.keys(oldTypeMap).filter(\n    name => !isPrimitive(name),\n  );\n  const newTypenames = Object.keys(newTypeMap).filter(\n    name => !isPrimitive(name),\n  );\n\n  const added = diffArrays(newTypenames, oldTypenames).map(\n    name => newTypeMap[name],\n  );\n  const removed = diffArrays(oldTypenames, newTypenames).map(\n    name => oldTypeMap[name],\n  );\n  const common = unionArrays(oldTypenames, newTypenames).map(name => ({\n    inOld: oldTypeMap[name],\n    inNew: newTypeMap[name],\n  }));\n\n  return {\n    added,\n    removed,\n    common,\n  };\n}\n\nfunction diffDirectives(\n  oldSchema: GraphQLSchema,\n  newSchema: GraphQLSchema,\n): {\n  added: GraphQLDirective[];\n  removed: GraphQLDirective[];\n  common: {\n    inOld: GraphQLDirective;\n    inNew: GraphQLDirective;\n  }[];\n} {\n  const oldDirectives = oldSchema.getDirectives();\n  const newDirectives = newSchema.getDirectives();\n  const oldNames = oldDirectives.map(d => d.name);\n  const newNames = newDirectives.map(d => d.name);\n\n  const added = diffArrays(newNames, oldNames).map(name =>\n    newDirectives.find(d => d.name === name),\n  ) as GraphQLDirective[];\n  const removed = diffArrays(oldNames, newNames).map(name =>\n    oldDirectives.find(d => d.name === name),\n  ) as GraphQLDirective[];\n  const common = unionArrays(oldNames, newNames).map(name => ({\n    inOld: oldDirectives.find(d => d.name === name) as GraphQLDirective,\n    inNew: newDirectives.find(d => d.name === name) as GraphQLDirective,\n  }));\n\n  return {\n    added,\n    removed,\n    common,\n  };\n}\n\nfunction changesInSchema(\n  oldSchema: GraphQLSchema,\n  newSchema: GraphQLSchema,\n): Change[] {\n  const changes: Change[] = [];\n  const oldRoot = {\n    query: (oldSchema.getQueryType() || ({} as GraphQLObjectType)).name,\n    mutation: (oldSchema.getMutationType() || ({} as GraphQLObjectType)).name,\n    subscription: (oldSchema.getSubscriptionType() || ({} as GraphQLObjectType))\n      .name,\n  };\n  const newRoot = {\n    query: (newSchema.getQueryType() || ({} as GraphQLObjectType)).name,\n    mutation: (newSchema.getMutationType() || ({} as GraphQLObjectType)).name,\n    subscription: (newSchema.getSubscriptionType() || ({} as GraphQLObjectType))\n      .name,\n  };\n\n  if (isNotEqual(oldRoot.query, newRoot.query)) {\n    changes.push(schemaQueryTypeChanged(oldSchema, newSchema));\n  }\n\n  if (isNotEqual(oldRoot.mutation, newRoot.mutation)) {\n    changes.push(schemaMutationTypeChanged(oldSchema, newSchema));\n  }\n\n  if (isNotEqual(oldRoot.subscription, newRoot.subscription)) {\n    changes.push(schemaSubscriptionTypeChanged(oldSchema, newSchema));\n  }\n\n  return changes;\n}\n\nfunction changesInType(\n  oldType: GraphQLNamedType,\n  newType: GraphQLNamedType,\n): Change[] {\n  let changes: Change[] = [];\n\n  if (isEnumType(oldType) && isEnumType(newType)) {\n    changes = changesInEnum(oldType, newType);\n  } else if (isUnionType(oldType) && isUnionType(newType)) {\n    changes = changesInUnion(oldType, newType);\n  } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n    changes = changesInInputObject(oldType, newType);\n  } else if (isObjectType(oldType) && isObjectType(newType)) {\n    changes = changesInObject(oldType, newType);\n  } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n    changes = changesInInterface(oldType, newType);\n  } else if (isScalarType(oldType) && isScalarType(newType)) {\n    // what to do with scalar types?\n  } else {\n    changes = [typeKindChanged(oldType, newType)];\n  }\n\n  if (isNotEqual(oldType.description, newType.description)) {\n    changes.push(typeDescriptionChanged(oldType, newType));\n  }\n\n  return changes;\n}\n"]}