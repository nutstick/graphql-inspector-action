{"version":3,"file":"directive.js","sourceRoot":"","sources":["../../src/diff/directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLDirective,\n  DirectiveLocationEnum,\n  GraphQLArgument,\n} from 'graphql';\n\nimport {isNotEqual} from './common/compare';\nimport {Change} from './changes/change';\nimport {\n  directiveDescriptionChanged,\n  directiveLocationAdded,\n  directiveLocationRemoved,\n  directiveArgumentAdded,\n  directiveArgumentRemoved,\n  directiveArgumentDescriptionChanged,\n  directiveArgumentDefaultValueChanged,\n  directiveArgumentTypeChanged,\n} from './changes/directive';\nimport {diffArrays, unionArrays} from '../utils/arrays';\n\nexport function changesInDirective(\n  oldDirective: GraphQLDirective,\n  newDirective: GraphQLDirective,\n): Change[] {\n  const changes: Change[] = [];\n\n  if (isNotEqual(oldDirective.description, newDirective.description)) {\n    changes.push(directiveDescriptionChanged(oldDirective, newDirective));\n  }\n\n  // locations added\n  changes.push(\n    ...diffArrays(newDirective.locations, oldDirective.locations).map(\n      location =>\n        directiveLocationAdded(newDirective, location as DirectiveLocationEnum),\n    ),\n  );\n\n  // locations removed\n  changes.push(\n    ...diffArrays(oldDirective.locations, newDirective.locations).map(\n      location =>\n        directiveLocationRemoved(\n          oldDirective,\n          location as DirectiveLocationEnum,\n        ),\n    ),\n  );\n\n  const oldNames = oldDirective.args.map(a => a.name);\n  const newNames = newDirective.args.map(a => a.name);\n\n  // arguments added\n  changes.push(\n    ...diffArrays(newNames, oldNames).map(name =>\n      directiveArgumentAdded(newDirective, newDirective.args.find(\n        a => a.name === name,\n      ) as GraphQLArgument),\n    ),\n  );\n\n  // arguments removed\n  changes.push(\n    ...diffArrays(oldNames, newNames).map(name =>\n      directiveArgumentRemoved(oldDirective, oldDirective.args.find(\n        a => a.name === name,\n      ) as GraphQLArgument),\n    ),\n  );\n\n  // common arguments\n  unionArrays(oldNames, newNames).forEach(name => {\n    const oldArg = oldDirective.args.find(\n      a => a.name === name,\n    ) as GraphQLArgument;\n    const newArg = newDirective.args.find(\n      a => a.name === name,\n    ) as GraphQLArgument;\n\n    changes.push(...changesInDirectiveArgument(oldDirective, oldArg, newArg));\n  });\n\n  return changes;\n}\n\nfunction changesInDirectiveArgument(\n  directive: GraphQLDirective,\n  oldArg: GraphQLArgument,\n  newArg: GraphQLArgument,\n): Change[] {\n  const changes: Change[] = [];\n\n  if (isNotEqual(oldArg.description, newArg.description)) {\n    changes.push(\n      directiveArgumentDescriptionChanged(directive, oldArg, newArg),\n    );\n  }\n\n  if (isNotEqual(oldArg.defaultValue, newArg.defaultValue)) {\n    changes.push(\n      directiveArgumentDefaultValueChanged(directive, oldArg, newArg),\n    );\n  }\n\n  if (isNotEqual(oldArg.type.toString(), newArg.type.toString())) {\n    changes.push(directiveArgumentTypeChanged(directive, oldArg, newArg));\n  }\n\n  return changes;\n}\n"]}