{"version":3,"file":"object.js","sourceRoot":"","sources":["../../src/diff/object.ts"],"names":[],"mappings":";;AAGA,2CAG0B;AAC1B,yCAAyD;AACzD,iCAAuC;AACvC,0CAAwD;AAExD,SAAgB,eAAe,CAC7B,OAA0B,EAC1B,OAA0B;IAE1B,IAAM,OAAO,GAAa,EAAE,CAAC;IAE7B,aAAa;IACb,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;IACnD,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;IACrD,SAAS;IACT,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;IAC/C,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;IAEjD,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,EAAc;YAAb,gBAAK,EAAE,gBAAK;QACpD,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,sBAAc,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE;IACzD,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC;AAlBD,0CAkBC;AAED,SAAS,eAAe,CACtB,OAA0B,EAC1B,OAA0B;IAE1B,IAAM,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAC9C,IAAM,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAC9C,IAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC;IAChD,IAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC;IAEhD,OAAO,mBAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC;SAClC,GAAG,CACF,UAAA,IAAI,IAAI,OAAA,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,IAAI,EAAf,CAAe,CAAyB,EAAhE,CAAgE,CACzE;SACA,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,iCAAwB,CAAC,CAAC,EAAE,OAAO,CAAC,EAApC,CAAoC,CAAC,CAAC;AACpD,CAAC;AAED,SAAS,iBAAiB,CACxB,OAA0B,EAC1B,OAA0B;IAE1B,IAAM,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAC9C,IAAM,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAC9C,IAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC;IAChD,IAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC;IAEhD,OAAO,mBAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC;SAClC,GAAG,CACF,UAAA,IAAI,IAAI,OAAA,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,IAAI,EAAf,CAAe,CAAyB,EAAhE,CAAgE,CACzE;SACA,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,mCAA0B,CAAC,CAAC,EAAE,OAAO,CAAC,EAAtC,CAAsC,CAAC,CAAC;AACtD,CAAC;AAED,SAAS,WAAW,CAClB,OAA0B,EAC1B,OAA0B;IAE1B,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IACtC,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IACtC,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAExC,OAAO,mBAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC;SAClC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,SAAS,CAAC,IAAI,CAAC,EAAf,CAAe,CAAC;SAC5B,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,kBAAU,CAAC,OAAO,EAAE,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC;AACtC,CAAC;AAED,SAAS,aAAa,CACpB,OAA0B,EAC1B,OAA0B;IAE1B,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IACtC,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IACtC,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAExC,OAAO,mBAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC;SAClC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,SAAS,CAAC,IAAI,CAAC,EAAf,CAAe,CAAC;SAC5B,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,oBAAY,CAAC,OAAO,EAAE,CAAC,CAAC,EAAxB,CAAwB,CAAC,CAAC;AACxC,CAAC;AAED,SAAS,aAAa,CAAC,OAA0B,EAAE,OAA0B;IAC3E,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IACtC,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IACtC,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAExC,OAAO,oBAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC;QAClD,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC;QACtB,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC;KACvB,CAAC,EAHiD,CAGjD,CAAC,CAAC;AACN,CAAC","sourcesContent":["import {GraphQLObjectType, GraphQLInterfaceType} from 'graphql';\n\nimport {Change} from './changes/change';\nimport {\n  objectTypeInterfaceAdded,\n  objectTypeInterfaceRemoved,\n} from './changes/object';\nimport {fieldRemoved, fieldAdded} from './changes/field';\nimport {changesInField} from './field';\nimport {diffArrays, unionArrays} from '../utils/arrays';\n\nexport function changesInObject(\n  oldType: GraphQLObjectType,\n  newType: GraphQLObjectType,\n): Change[] {\n  const changes: Change[] = [];\n\n  // Interfaces\n  changes.push(...addedInterfaces(oldType, newType));\n  changes.push(...removedInterfaces(oldType, newType));\n  // Fields\n  changes.push(...addedFields(oldType, newType));\n  changes.push(...removedFields(oldType, newType));\n\n  changedFields(oldType, newType).forEach(({inOld, inNew}) => {\n    changes.push(...changesInField(oldType, inOld, inNew));\n  });\n\n  return changes;\n}\n\nfunction addedInterfaces(\n  oldType: GraphQLObjectType,\n  newType: GraphQLObjectType,\n): Change[] {\n  const oldInterfaces = oldType.getInterfaces();\n  const newInterfaces = newType.getInterfaces();\n  const oldNames = oldInterfaces.map(i => i.name);\n  const newNames = newInterfaces.map(i => i.name);\n\n  return diffArrays(newNames, oldNames)\n    .map(\n      name => newInterfaces.find(i => i.name === name) as GraphQLInterfaceType,\n    )\n    .map(i => objectTypeInterfaceAdded(i, newType));\n}\n\nfunction removedInterfaces(\n  oldType: GraphQLObjectType,\n  newType: GraphQLObjectType,\n): Change[] {\n  const oldInterfaces = oldType.getInterfaces();\n  const newInterfaces = newType.getInterfaces();\n  const oldNames = oldInterfaces.map(i => i.name);\n  const newNames = newInterfaces.map(i => i.name);\n\n  return diffArrays(oldNames, newNames)\n    .map(\n      name => oldInterfaces.find(i => i.name === name) as GraphQLInterfaceType,\n    )\n    .map(i => objectTypeInterfaceRemoved(i, newType));\n}\n\nfunction addedFields(\n  oldType: GraphQLObjectType,\n  newType: GraphQLObjectType,\n): Change[] {\n  const oldFields = oldType.getFields();\n  const newFields = newType.getFields();\n  const oldNames = Object.keys(oldFields);\n  const newNames = Object.keys(newFields);\n\n  return diffArrays(newNames, oldNames)\n    .map(name => newFields[name])\n    .map(f => fieldAdded(newType, f));\n}\n\nfunction removedFields(\n  oldType: GraphQLObjectType,\n  newType: GraphQLObjectType,\n): Change[] {\n  const oldFields = oldType.getFields();\n  const newFields = newType.getFields();\n  const oldNames = Object.keys(oldFields);\n  const newNames = Object.keys(newFields);\n\n  return diffArrays(oldNames, newNames)\n    .map(name => oldFields[name])\n    .map(f => fieldRemoved(oldType, f));\n}\n\nfunction changedFields(oldType: GraphQLObjectType, newType: GraphQLObjectType) {\n  const oldFields = oldType.getFields();\n  const newFields = newType.getFields();\n  const oldNames = Object.keys(oldFields);\n  const newNames = Object.keys(newFields);\n\n  return unionArrays(oldNames, newNames).map(name => ({\n    inOld: oldFields[name],\n    inNew: newFields[name],\n  }));\n}\n"]}