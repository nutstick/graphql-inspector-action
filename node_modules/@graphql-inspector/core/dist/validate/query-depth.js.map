{"version":3,"file":"query-depth.js","sourceRoot":"","sources":["../../src/validate/query-depth.ts"],"names":[],"mappings":"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","sourcesContent":["import {DepGraph} from 'dependency-graph';\nimport {\n  DocumentNode,\n  GraphQLError,\n  ASTNode,\n  Kind,\n  FragmentDefinitionNode,\n  Source,\n} from 'graphql';\n\nexport function validateQueryDepth({\n  source,\n  doc,\n  maxDepth,\n  fragmentGraph,\n}: {\n  source: Source;\n  doc: DocumentNode;\n  maxDepth: number;\n  fragmentGraph: DepGraph<FragmentDefinitionNode>;\n}): GraphQLError | void {\n  try {\n    calculateDepth({\n      node: doc,\n      currentDepth: 0,\n      maxDepth,\n      getFragment(name) {\n        return fragmentGraph.getNodeData(name);\n      },\n    });\n  } catch (errorOrNode) {\n    if (errorOrNode instanceof Error) {\n      throw errorOrNode;\n    }\n\n    const node: ASTNode = errorOrNode;\n\n    return new GraphQLError(\n      `Query exceeds maximum depth of ${maxDepth}`,\n      node,\n      source,\n      node.loc && node.loc.start ? [node.loc.start] : undefined,\n    );\n  }\n}\n\nexport function calculateDepth({\n  node,\n  currentDepth,\n  maxDepth,\n  getFragment,\n}: {\n  node: ASTNode;\n  currentDepth: number;\n  maxDepth?: number;\n  getFragment: (fragmentName: string) => FragmentDefinitionNode;\n}): number | never {\n  if (maxDepth && currentDepth > maxDepth) {\n    throw node;\n  }\n\n  switch (node.kind) {\n    case Kind.FIELD: {\n      if (node.name.value.startsWith('__') || !node.selectionSet) {\n        return 0;\n      }\n\n      const maxInnerDepth = calculateDepth({\n        node: node.selectionSet,\n        currentDepth: currentDepth + 1,\n        maxDepth,\n        getFragment,\n      });\n\n      return 1 + maxInnerDepth;\n    }\n\n    case Kind.SELECTION_SET: {\n      return Math.max(\n        ...node.selections.map(selection => {\n          return calculateDepth({\n            node: selection,\n            currentDepth: currentDepth,\n            maxDepth,\n            getFragment,\n          });\n        }),\n      );\n    }\n\n    case Kind.DOCUMENT: {\n      return Math.max(\n        ...node.definitions.map(def => {\n          return calculateDepth({\n            node: def,\n            currentDepth: currentDepth,\n            maxDepth,\n            getFragment,\n          });\n        }),\n      );\n    }\n\n    case Kind.OPERATION_DEFINITION:\n    case Kind.INLINE_FRAGMENT:\n    case Kind.FRAGMENT_DEFINITION: {\n      return Math.max(\n        ...node.selectionSet.selections.map(selection => {\n          return calculateDepth({\n            node: selection,\n            currentDepth,\n            maxDepth,\n            getFragment,\n          });\n        }),\n      );\n    }\n\n    case Kind.FRAGMENT_SPREAD:\n      return calculateDepth({\n        node: getFragment(node.name.value),\n        currentDepth,\n        maxDepth,\n        getFragment,\n      });\n\n    default: {\n      throw new Error(`Couldn't handle ${node.kind}`);\n    }\n  }\n}\n"]}