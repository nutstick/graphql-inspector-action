{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/validate/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLError,\n  Source,\n  print,\n  parse,\n  validate as validateDocument,\n  FragmentDefinitionNode,\n  DocumentNode,\n} from 'graphql';\nimport {DepGraph} from 'dependency-graph';\n\nimport {readDocument} from '../ast/document';\nimport {findDeprecatedUsages} from '../utils/graphql';\nimport {validateQueryDepth} from './query-depth';\nimport {\n  transformSchemaWithApollo,\n  transformDocumentWithApollo,\n} from '../utils/apollo';\n\nexport interface InvalidDocument {\n  source: Source;\n  errors: GraphQLError[];\n  deprecated: GraphQLError[];\n}\n\nexport interface ValidateOptions {\n  strictFragments?: boolean;\n  strictDeprecated?: boolean;\n  apollo?: boolean;\n  maxDepth?: number;\n}\n\nexport function validate(\n  schema: GraphQLSchema,\n  sources: Source[],\n  options?: ValidateOptions,\n): InvalidDocument[] {\n  const config: ValidateOptions = {\n    strictDeprecated: true,\n    strictFragments: true,\n    apollo: false,\n    ...options,\n  };\n  const invalidDocuments: InvalidDocument[] = [];\n  // read documents\n  const documents = sources.map(readDocument);\n  // keep all named fragments\n  const fragments: Array<{node: FragmentDefinitionNode; source: string}> = [];\n  const fragmentNames: string[] = [];\n  const graph = new DepGraph<FragmentDefinitionNode>({circular: true});\n\n  documents.forEach(doc => {\n    doc.fragments.forEach(fragment => {\n      fragmentNames.push(fragment.node.name.value);\n      fragments.push(fragment);\n      graph.addNode(fragment.node.name.value, fragment.node);\n    });\n  });\n\n  fragments.forEach(fragment => {\n    const depends = extractFragments(print(fragment.node));\n\n    if (depends) {\n      depends.forEach(name => {\n        graph.addDependency(fragment.node.name.value, name);\n      });\n    }\n  });\n\n  documents\n    // since we include fragments, validate only operations\n    .filter(doc => doc.hasOperations)\n    .forEach(doc => {\n      const docWithOperations: DocumentNode = {\n        kind: 'Document',\n        definitions: doc.operations.map(d => d.node),\n      };\n      const extractedFragments = (\n        extractFragments(print(docWithOperations)) || []\n      )\n        // resolve all nested fragments\n        .map(fragmentName =>\n          resolveFragment(graph.getNodeData(fragmentName), graph),\n        )\n        // flatten arrays\n        .reduce((list, current) => list.concat(current), [])\n        // remove duplicates\n        .filter(\n          (def, i, all) =>\n            all.findIndex(item => item.name.value === def.name.value) === i,\n        );\n      const merged: DocumentNode = {\n        kind: 'Document',\n        definitions: [...docWithOperations.definitions, ...extractedFragments],\n      };\n\n      const transformedSchema = config.apollo\n        ? transformSchemaWithApollo(schema)\n        : schema;\n      const transformedDoc = config.apollo\n        ? transformDocumentWithApollo(merged)\n        : merged;\n\n      const errors =\n        (validateDocument(\n          transformedSchema,\n          transformedDoc,\n        ) as GraphQLError[]) || [];\n\n      if (config.maxDepth) {\n        const depthError = validateQueryDepth({\n          source: doc.source,\n          doc: transformedDoc,\n          maxDepth: config.maxDepth,\n          fragmentGraph: graph,\n        });\n\n        if (depthError) {\n          errors.push(depthError);\n        }\n      }\n\n      const deprecated = config.strictDeprecated\n        ? findDeprecatedUsages(transformedSchema, parse(doc.source.body))\n        : [];\n      const duplicatedFragments = config.strictFragments\n        ? findDuplicatedFragments(fragmentNames)\n        : [];\n\n      if (sumLengths(errors, duplicatedFragments, deprecated) > 0) {\n        invalidDocuments.push({\n          source: doc.source,\n          errors: [...errors, ...duplicatedFragments],\n          deprecated,\n        });\n      }\n    });\n\n  return invalidDocuments;\n}\n\nfunction findDuplicatedFragments(fragmentNames: string[]) {\n  return fragmentNames\n    .filter((name, i, all) => all.indexOf(name) !== i)\n    .map(name => new GraphQLError(`Name of '${name}' fragment is not unique`));\n}\n\n//\n// PostInfo -> AuthorInfo\n// AuthorInfo -> None\n//\nfunction resolveFragment(\n  fragment: FragmentDefinitionNode,\n  graph: DepGraph<FragmentDefinitionNode>,\n): FragmentDefinitionNode[] {\n  return graph\n    .dependenciesOf(fragment.name.value)\n    .reduce(\n      (list, current) => [\n        ...list,\n        ...resolveFragment(graph.getNodeData(current), graph),\n      ],\n      [fragment],\n    );\n}\n\nfunction extractFragments(document: string): string[] | undefined {\n  return (document.match(/[\\.]{3}[a-z0-9\\_]+\\b/gi) || []).map(name =>\n    name.replace('...', ''),\n  );\n}\n\nfunction sumLengths(...arrays: any[][]): number {\n  return arrays.reduce((sum, {length}) => sum + length, 0);\n}\n"]}