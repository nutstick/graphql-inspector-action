"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
function validateQueryDepth(_a) {
    var source = _a.source, doc = _a.doc, maxDepth = _a.maxDepth, fragmentGraph = _a.fragmentGraph;
    try {
        calculateDepth({
            node: doc,
            currentDepth: 0,
            maxDepth: maxDepth,
            getFragment: function (name) {
                return fragmentGraph.getNodeData(name);
            },
        });
    }
    catch (errorOrNode) {
        if (errorOrNode instanceof Error) {
            throw errorOrNode;
        }
        var node = errorOrNode;
        return new graphql_1.GraphQLError("Query exceeds maximum depth of " + maxDepth, node, source, node.loc && node.loc.start ? [node.loc.start] : undefined);
    }
}
exports.validateQueryDepth = validateQueryDepth;
function calculateDepth(_a) {
    var node = _a.node, currentDepth = _a.currentDepth, maxDepth = _a.maxDepth, getFragment = _a.getFragment;
    if (maxDepth && currentDepth > maxDepth) {
        throw node;
    }
    switch (node.kind) {
        case graphql_1.Kind.FIELD: {
            if (node.name.value.startsWith('__') || !node.selectionSet) {
                return 0;
            }
            var maxInnerDepth = calculateDepth({
                node: node.selectionSet,
                currentDepth: currentDepth + 1,
                maxDepth: maxDepth,
                getFragment: getFragment,
            });
            return 1 + maxInnerDepth;
        }
        case graphql_1.Kind.SELECTION_SET: {
            return Math.max.apply(Math, node.selections.map(function (selection) {
                return calculateDepth({
                    node: selection,
                    currentDepth: currentDepth,
                    maxDepth: maxDepth,
                    getFragment: getFragment,
                });
            }));
        }
        case graphql_1.Kind.DOCUMENT: {
            return Math.max.apply(Math, node.definitions.map(function (def) {
                return calculateDepth({
                    node: def,
                    currentDepth: currentDepth,
                    maxDepth: maxDepth,
                    getFragment: getFragment,
                });
            }));
        }
        case graphql_1.Kind.OPERATION_DEFINITION:
        case graphql_1.Kind.INLINE_FRAGMENT:
        case graphql_1.Kind.FRAGMENT_DEFINITION: {
            return Math.max.apply(Math, node.selectionSet.selections.map(function (selection) {
                return calculateDepth({
                    node: selection,
                    currentDepth: currentDepth,
                    maxDepth: maxDepth,
                    getFragment: getFragment,
                });
            }));
        }
        case graphql_1.Kind.FRAGMENT_SPREAD:
            return calculateDepth({
                node: getFragment(node.name.value),
                currentDepth: currentDepth,
                maxDepth: maxDepth,
                getFragment: getFragment,
            });
        default: {
            throw new Error("Couldn't handle " + node.kind);
        }
    }
}
exports.calculateDepth = calculateDepth;
//# sourceMappingURL=query-depth.js.map