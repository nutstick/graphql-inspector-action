{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/coverage/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLError,\n  Source,\n  isInterfaceType,\n  isObjectType,\n  visit,\n  visitWithTypeInfo,\n  TypeInfo,\n  Visitor,\n  GraphQLNamedType,\n} from 'graphql';\n\nimport {readDocument} from '../ast/document';\nimport {isForIntrospection, isPrimitive} from '../utils/graphql';\n\nexport interface Location {\n  start: number;\n  end: number;\n}\n\nexport interface TypeChildCoverage {\n  hits: number;\n  locations: {\n    [name: string]: Array<Location>;\n  };\n}\n\nexport interface TypeCoverage {\n  hits: number;\n  type: GraphQLNamedType;\n  children: {\n    [name: string]: TypeChildCoverage;\n  };\n}\n\nexport interface SchemaCoverage {\n  sources: Source[];\n  types: {\n    [typename: string]: TypeCoverage;\n  };\n}\n\nexport interface InvalidDocument {\n  source: Source;\n  errors: ReadonlyArray<GraphQLError>;\n}\n\nexport function coverage(\n  schema: GraphQLSchema,\n  sources: Source[],\n): SchemaCoverage {\n  const coverage: SchemaCoverage = {\n    sources,\n    types: {},\n  };\n  const typeMap = schema.getTypeMap();\n  const typeInfo = new TypeInfo(schema);\n  const visitor: (source: Source) => Visitor<any, any> = source => ({\n    Field(node) {\n      const fieldDef = typeInfo.getFieldDef();\n      const parent = typeInfo.getParentType();\n\n      if (parent && fieldDef && fieldDef.name !== '__typename') {\n        const locations =\n          coverage.types[parent.name].children[fieldDef.name].locations[\n            source.name\n          ];\n        coverage.types[parent.name].hits++;\n        coverage.types[parent.name].children[fieldDef.name].locations[\n          source.name\n        ] = [node.loc].concat(locations || []);\n        coverage.types[parent.name].children[fieldDef.name].hits++;\n      }\n    },\n  });\n\n  for (const typename in typeMap) {\n    if (!isForIntrospection(typename) && !isPrimitive(typename)) {\n      const type = typeMap[typename];\n\n      if (isObjectType(type) || isInterfaceType(type)) {\n        const typeCoverage: TypeCoverage = {\n          hits: 0,\n          type,\n          children: {},\n        };\n        const fieldMap = type.getFields();\n\n        for (const fieldname in fieldMap) {\n          const field = fieldMap[fieldname];\n\n          typeCoverage.children[field.name] = {\n            hits: 0,\n            locations: {},\n          };\n        }\n\n        coverage.types[type.name] = typeCoverage;\n      }\n    }\n  }\n\n  const documents = coverage.sources.map(readDocument);\n\n  documents.forEach((doc, i) => {\n    const source = coverage.sources[i];\n    doc.operations.forEach(op => {\n      visit(op.node, visitWithTypeInfo(typeInfo, visitor(source)));\n    });\n    doc.fragments.forEach(fr => {\n      visit(fr.node, visitWithTypeInfo(typeInfo, visitor(source)));\n    });\n  });\n\n  return coverage;\n}\n"]}