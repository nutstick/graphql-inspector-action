{"version":3,"file":"graphql.js","sourceRoot":"","sources":["../../src/utils/graphql.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLInputType,\n  isWrappingType,\n  isListType,\n  isNonNullType,\n  GraphQLOutputType,\n  GraphQLNamedType,\n  KindEnum,\n  Kind,\n  GraphQLSchema,\n  GraphQLError,\n  DocumentNode,\n  TypeInfo,\n  visit,\n  visitWithTypeInfo,\n  getNamedType,\n  FieldNode,\n} from 'graphql';\n\nexport function safeChangeForField(\n  oldType: GraphQLOutputType,\n  newType: GraphQLOutputType,\n): boolean {\n  if (!isWrappingType(oldType) && !isWrappingType(newType)) {\n    return oldType.toString() === newType.toString();\n  }\n\n  if (isNonNullType(newType)) {\n    const ofType = isNonNullType(oldType) ? oldType.ofType : oldType;\n\n    return safeChangeForField(ofType, newType.ofType);\n  }\n\n  if (isListType(oldType)) {\n    return (\n      (isListType(newType) &&\n        safeChangeForField(oldType.ofType, newType.ofType)) ||\n      (isNonNullType(newType) && safeChangeForField(oldType, newType.ofType))\n    );\n  }\n\n  return false;\n}\n\nexport function safeChangeForInputValue(\n  oldType: GraphQLInputType,\n  newType: GraphQLInputType,\n): boolean {\n  if (!isWrappingType(oldType) && !isWrappingType(newType)) {\n    return oldType.toString() === newType.toString();\n  }\n\n  if (isListType(oldType) && isListType(newType)) {\n    return safeChangeForInputValue(oldType.ofType, newType.ofType);\n  }\n\n  if (isNonNullType(oldType)) {\n    const ofType = isNonNullType(newType) ? newType : newType;\n\n    return safeChangeForInputValue(oldType.ofType, ofType);\n  }\n\n  return false;\n}\n\nexport function getKind(type: GraphQLNamedType): KindEnum {\n  const node = type.astNode as any;\n  return (node && node.kind) || '';\n}\n\nexport function getTypePrefix(type: GraphQLNamedType): string {\n  const kind: KindEnum = getKind(type);\n\n  const kindsMap: Record<string, string> = {\n    [Kind.SCALAR_TYPE_DEFINITION]: 'scalar',\n    [Kind.OBJECT_TYPE_DEFINITION]: 'type',\n    [Kind.INTERFACE_TYPE_DEFINITION]: 'interface',\n    [Kind.UNION_TYPE_DEFINITION]: 'union',\n    [Kind.ENUM_TYPE_DEFINITION]: 'enum',\n    [Kind.INPUT_OBJECT_TYPE_DEFINITION]: 'input',\n  };\n\n  return kindsMap[kind];\n}\n\nexport function isPrimitive(type: GraphQLNamedType | string): boolean {\n  return (\n    ['String', 'Int', 'Float', 'Boolean', 'ID'].indexOf(\n      typeof type === 'string' ? type : type.name,\n    ) !== -1\n  );\n}\n\nexport function isForIntrospection(type: GraphQLNamedType | string): boolean {\n  return (\n    [\n      '__Schema',\n      '__Type',\n      '__TypeKind',\n      '__Field',\n      '__InputValue',\n      '__EnumValue',\n      '__Directive',\n      '__DirectiveLocation',\n    ].indexOf(typeof type === 'string' ? type : type.name) !== -1\n  );\n}\n\nexport function findDeprecatedUsages(\n  schema: GraphQLSchema,\n  ast: DocumentNode,\n): Array<GraphQLError> {\n  const errors: GraphQLError[] = [];\n  const typeInfo = new TypeInfo(schema);\n\n  visit(\n    ast,\n    visitWithTypeInfo(typeInfo, {\n      Field(node) {\n        const fieldDef = typeInfo.getFieldDef();\n        if (fieldDef && fieldDef.isDeprecated) {\n          const parentType = typeInfo.getParentType();\n          if (parentType) {\n            const reason = fieldDef.deprecationReason;\n            errors.push(\n              new GraphQLError(\n                `The field '${parentType.name}.${\n                  fieldDef.name\n                }' is deprecated.${reason ? ' ' + reason : ''}`,\n                [node],\n              ),\n            );\n          }\n        }\n      },\n      EnumValue(node) {\n        const enumVal = typeInfo.getEnumValue();\n        if (enumVal && enumVal.isDeprecated) {\n          const type = getNamedType(typeInfo.getInputType()!);\n          if (type) {\n            const reason = enumVal.deprecationReason;\n            errors.push(\n              new GraphQLError(\n                `The enum value '${type.name}.${enumVal.name}' is deprecated.${\n                  reason ? ' ' + reason : ''\n                }`,\n                [node],\n              ),\n            );\n          }\n        }\n      },\n    }),\n  );\n\n  return errors;\n}\n\nexport function removeFieldIfDirectives(\n  node: FieldNode,\n  directiveNames: string[],\n): FieldNode | null {\n  if (node.directives) {\n    if (\n      node.directives.some(d => directiveNames.indexOf(d.name.value) !== -1)\n    ) {\n      return null;\n    }\n  }\n\n  return node;\n}\n"]}