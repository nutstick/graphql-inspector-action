"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var getGithubConfig = require("probot-config");
var graphql_1 = require("graphql");
var types_1 = require("./types");
var diff_1 = require("./diff");
var check = require("./check-runs");
function fileLoader(_a) {
    var context = _a.context, owner = _a.owner, repo = _a.repo;
    var query = "\n    query GetFile($repo: String!, $owner: String!, $expression: String!) {\n      repository(name: $repo, owner: $owner) {\n        object(expression: $expression) {\n          ... on Blob {\n            text\n          }\n        }\n      }\n    }\n  ";
    return function loadFile(file) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, context.github.graphql(query, {
                            repo: repo,
                            owner: owner,
                            expression: file.ref + ":" + file.path,
                        })];
                    case 1:
                        result = _a.sent();
                        try {
                            if (!result) {
                                throw new Error("No result :(");
                            }
                            if (result.data) {
                                return [2 /*return*/, result.data.repository.object.text];
                            }
                            return [2 /*return*/, result.repository.object.text];
                        }
                        catch (error) {
                            console.log(result);
                            console.error(error);
                            throw new Error("Failed to load '" + file.path + "' (ref: " + file.ref + ")");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
}
function handleProbot(app) {
    var _this = this;
    app.on('check_run', function (context) { return __awaiter(_this, void 0, void 0, function () {
        var ref, action, _a, owner, repo;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    ref = context.payload.check_run.head_sha;
                    action = context.payload.action;
                    _a = context.repo(), owner = _a.owner, repo = _a.repo;
                    return [4 /*yield*/, handleAction({ context: context, owner: owner, repo: repo, ref: ref, action: action })];
                case 1:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    app.on('check_suite', function (context) { return __awaiter(_this, void 0, void 0, function () {
        var ref, action, _a, owner, repo;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    ref = context.payload.check_suite.head_sha;
                    action = context.payload.action;
                    _a = context.repo(), owner = _a.owner, repo = _a.repo;
                    return [4 /*yield*/, handleAction({ context: context, owner: owner, repo: repo, ref: ref, action: action })];
                case 1:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    }); });
}
exports.default = handleProbot;
function handleAction(_a) {
    var context = _a.context, owner = _a.owner, repo = _a.repo, ref = _a.ref, action = _a.action;
    return __awaiter(this, void 0, void 0, function () {
        function loadConfig() {
            return __awaiter(this, void 0, void 0, function () {
                var identifier, yamlConfig, ymlConfig, pkg, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            identifier = 'graphql-inspector';
                            return [4 /*yield*/, loadGithubConfig(identifier + '.yaml')];
                        case 1:
                            yamlConfig = _c.sent();
                            return [4 /*yield*/, loadGithubConfig(identifier + '.yml')];
                        case 2:
                            ymlConfig = _c.sent();
                            if (!(yamlConfig || ymlConfig)) return [3 /*break*/, 3];
                            return [2 /*return*/, yamlConfig || ymlConfig];
                        case 3:
                            _b = (_a = JSON).parse;
                            return [4 /*yield*/, loadFile({
                                    ref: ref,
                                    path: 'package.json',
                                })];
                        case 4:
                            pkg = _b.apply(_a, [_c.sent()]);
                            if (pkg[identifier]) {
                                return [2 /*return*/, pkg[identifier]];
                            }
                            _c.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        }
        function loadGithubConfig(identifier) {
            var loader = getGithubConfig;
            if (typeof loader !== 'function' && typeof loader.default !== 'undefined') {
                loader.default(context, identifier);
            }
            return loader(context, identifier);
        }
        var id, loadFile, url, config, oldPointer, newPointer, schemas, _b, _c, _d, actions, results, conclusion, annotations, issueInfo, _e, title, summary;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    if (['requested', 'rerequested', 'gh-action'].indexOf(action) === -1) {
                        return [2 /*return*/];
                    }
                    id = owner + "/" + repo + "#" + ref;
                    context.log.info("GraphQL Inspector started (action: " + action + ") - " + id);
                    loadFile = fileLoader({
                        context: context,
                        owner: owner,
                        repo: repo,
                    });
                    return [4 /*yield*/, check.start({
                            context: context,
                            owner: owner,
                            repo: repo,
                            sha: ref,
                        })];
                case 1:
                    url = _f.sent();
                    return [4 /*yield*/, loadConfig()];
                case 2:
                    config = _f.sent();
                    if (!!config) return [3 /*break*/, 4];
                    context.log.error("No config file - " + id);
                    return [4 /*yield*/, check.complete({
                            url: url,
                            context: context,
                            conclusion: types_1.CheckConclusion.Failure,
                        })];
                case 3:
                    _f.sent();
                    return [2 /*return*/];
                case 4:
                    oldPointer = config.schema;
                    newPointer = {
                        path: oldPointer.path,
                        ref: ref,
                    };
                    _b = {};
                    _c = graphql_1.buildSchema;
                    return [4 /*yield*/, loadFile(oldPointer)];
                case 5:
                    _b.old = _c.apply(void 0, [_f.sent()]);
                    _d = graphql_1.buildSchema;
                    return [4 /*yield*/, loadFile(newPointer)];
                case 6:
                    schemas = (_b.new = _d.apply(void 0, [_f.sent()]),
                        _b);
                    context.log.info("Both schemas built - " + id);
                    actions = [];
                    if (config.diff) {
                        actions.push(diff_1.diff({
                            path: config.schema.path,
                            schemas: schemas,
                        }));
                    }
                    return [4 /*yield*/, Promise.all(actions)];
                case 7:
                    results = _f.sent();
                    context.log.info("Actions (" + actions.length + ") are ready - " + id);
                    conclusion = results.some(function (action) { return action.conclusion === types_1.CheckConclusion.Failure; })
                        ? types_1.CheckConclusion.Failure
                        : types_1.CheckConclusion.Success;
                    annotations = results.reduce(function (annotations, action) {
                        if (action.annotations) {
                            return annotations.concat(action.annotations);
                        }
                        return annotations;
                    }, []);
                    issueInfo = "Found " + annotations.length + " issue" + (annotations.length > 1 ? 's' : '');
                    _e = conclusion === types_1.CheckConclusion.Failure
                        ? {
                            title: "Something is wrong with your schema",
                            summary: issueInfo,
                        }
                        : {
                            title: 'Everything looks good',
                            summary: issueInfo,
                        }, title = _e.title, summary = _e.summary;
                    context.log.info("Sending annotations (" + annotations.length + ")");
                    return [4 /*yield*/, check.annotations({
                            url: url,
                            context: context,
                            title: title,
                            summary: summary,
                            annotations: annotations,
                        })];
                case 8:
                    _f.sent();
                    context.log.info("Finishing check (" + conclusion + ")");
                    return [4 /*yield*/, check.complete({
                            url: url,
                            context: context,
                            conclusion: conclusion,
                        })];
                case 9:
                    _f.sent();
                    context.log.info("Completed");
                    return [2 /*return*/];
            }
        });
    });
}
exports.handleAction = handleAction;
//# sourceMappingURL=probot.js.map