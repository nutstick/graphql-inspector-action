"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
function normalizeSchema(schema) {
    return graphql_1.buildSchema(graphql_1.printSchema(schema));
}
function getLocation(_a) {
    var path = _a.path, schema = _a.schema;
    var normalizedSchema = normalizeSchema(schema);
    var printed = graphql_1.printSchema(normalizedSchema);
    var loc = getNodeLocation({ path: path, schema: normalizedSchema });
    var source = new graphql_1.Source(printed);
    if (!loc) {
        return {
            line: 1,
            column: 1,
        };
    }
    return graphql_1.getLocation(source, loc.start);
}
exports.getLocation = getLocation;
function getNodeLocation(_a) {
    var path = _a.path, schema = _a.schema;
    var _b = path.split('.'), typeName = _b[0], rest = _b.slice(1);
    var type = typeName.startsWith('@')
        ? schema.getDirective(typeName.substring(1))
        : schema.getType(typeName);
    if (graphql_1.isObjectType(type)) {
        // type.field.arg
        var fieldName = rest[0], argName_1 = rest[1];
        if (fieldName) {
            var field = type.getFields()[fieldName];
            if (argName_1) {
                var arg = field.args.find(function (a) { return a.name === argName_1; });
                // type.field.arg
                return arg.astNode.loc;
            }
            // type.field
            return field.astNode.loc;
        }
        // type
        return type.astNode.loc;
    }
    else if (graphql_1.isDirective(type)) {
        // directive.arg
        var argName_2 = rest[0];
        if (argName_2) {
            var arg = type.args.find(function (a) { return a.name === argName_2; });
            // directive.arg
            return arg.astNode.loc;
        }
        // directive
        return type.astNode.loc;
    }
    else if (graphql_1.isEnumType(type)) {
        // enum.value
        var valueName = rest[0];
        if (valueName) {
            var val = type.getValue(valueName);
            // enum.value
            return val.astNode.loc;
        }
        // enum
        return type.astNode.loc;
    }
    else if (graphql_1.isInputObjectType(type)) {
        // input.field
        var fieldName = rest[0];
        if (fieldName) {
            var field = type.getFields()[fieldName];
            // input.field
            return field.astNode.loc;
        }
        // input
        return type.astNode.loc;
    }
    else {
        // name
        return type.astNode.loc;
    }
}
//# sourceMappingURL=location.js.map